name: Deploy DEV API

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
  push:
    branches:
      - next
      - next-mamoru
      - main
    paths:
      - 'package.json'
      - 'yarn.lock'
      - 'apps/api/**'
      - 'libs/dal/**'
      - 'libs/shared/**'
env:
  ECR_SERVICE_NOVU_API:  novu/api

jobs:
  test_api:
    uses: ./.github/workflows/reusable-api-e2e.yml

  deploy_dev_api:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: test_api
    timeout-minutes: 80
    environment: Development
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Setup kernel for react native, increase watchers
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
      - uses: actions/setup-node@v2
        with:
          node-version: '16.15.1'
      - name: Start Redis
        uses: supercharge/redis-github-action@1.2.0

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.3.0
        with:
          mongodb-version: 4.2.8

      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 7.5.0
          run_install: false

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7.5.0
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: build api
        run: pnpm build:api
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          # cd apps/api && pnpm --silent --workspace-root pnpm-context -- apps/api/Dockerfile | docker build --build-arg
          cd apps/api
          pnpm --silent --workspace-root pnpm-context -- apps/api/Dockerfile | docker buildx build --build-arg PACKAGE_PATH=apps/api - -t novu-api 
          docker tag novu-api $ECR_REGISTRY/$ECR_SERVICE_NOVU_API:$IMAGE_TAG
          docker tag novu-api $ECR_REGISTRY/$ECR_SERVICE_NOVU_API:latest

          # docker run --network=host --name api -dit --env NODE_ENV=test $ECR_REGISTRY/$ECR_SERVICE_NOVU_API:$IMAGE_TAG
          # docker run --network=host appropriate/curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:1337/v1/health-check | grep 'ok'
          docker push --all-tags $ECR_REGISTRY/$ECR_SERVICE_NOVU_API;
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_SERVICE_NOVU_API:$IMAGE_TAG"
